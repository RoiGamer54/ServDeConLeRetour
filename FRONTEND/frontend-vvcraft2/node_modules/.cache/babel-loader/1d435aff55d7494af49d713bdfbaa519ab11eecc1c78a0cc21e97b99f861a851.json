{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"machine-info\"\n};\nconst _hoisted_2 = {\n  class: \"tabs\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = {\n  key: 0\n};\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = {\n  key: 2\n};\nconst _hoisted_9 = {\n  key: 3\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_PieChartVue = _resolveComponent(\"PieChartVue\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[17] || (_cache[17] = _createElementVNode(\"h3\", null, \"Informations de la Machine\", -1 /* HOISTED */)), _createElementVNode(\"ul\", _hoisted_2, [_createElementVNode(\"li\", {\n    class: \"tab active\",\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.setActiveTab('cpu'))\n  }, \"CPU\"), _createElementVNode(\"li\", {\n    class: \"tab\",\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.setActiveTab('os'))\n  }, \"OS & Disques\")]), $data.activeTab === 'cpu' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [!$data.loading && $data.systemInfo.cpu_info ? (_openBlock(), _createElementBlock(\"section\", _hoisted_4, [_cache[7] || (_cache[7] = _createElementVNode(\"h4\", null, \"Processeur\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Modèle:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.cpu_info.model), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Nombre de cœurs physiques:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.cpu_info.cores), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"strong\", null, \"Nombre de cœurs logiques:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.cpu_info.logical_cores), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"strong\", null, \"Utilisation totale:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.cpu_info.total_usage) + \"%\", 1 /* TEXT */)]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.systemInfo.cpu_info.usage_per_core, (usage, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, \"Utilisation du cœur \" + _toDisplayString(index + 1) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(usage) + \"%\", 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.systemInfo.cpu_info.frequency_per_core, (freq, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"p\", null, [_createElementVNode(\"strong\", null, \"Fréquence du cœur \" + _toDisplayString(index + 1) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(freq) + \" MHz\", 1 /* TEXT */)])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"p\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"strong\", null, \"Température CPU:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.cpu_info.temperature_per_core) + \"°C\", 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), $data.activeTab === 'os' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [!$data.loading && $data.systemInfo.os_info ? (_openBlock(), _createElementBlock(\"section\", _hoisted_6, [_cache[12] || (_cache[12] = _createElementVNode(\"h4\", null, \"OS\", -1 /* HOISTED */)), _createElementVNode(\"p\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"strong\", null, \"Type:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.os_info.os_type), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"strong\", null, \"Modèle de la machine:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.os_info.machine_model), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"strong\", null, \"Nom de la machine:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.os_info.node_name), 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[11] || (_cache[11] = _createElementVNode(\"strong\", null, \"Temps d'activité:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($data.systemInfo.os_info.uptime.toFixed(2)) + \" heures\", 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true), !$data.loading && $data.systemInfo.disk_usage ? (_openBlock(), _createElementBlock(\"section\", _hoisted_7, [_cache[16] || (_cache[16] = _createElementVNode(\"h4\", null, \"Disques\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.systemInfo.disk_usage, (disk, diskName) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: diskName,\n      class: \"disk-info\"\n    }, [_createElementVNode(\"h5\", null, _toDisplayString(diskName), 1 /* TEXT */), _createElementVNode(\"p\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"strong\", null, \"Capacité totale:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(disk.total.toFixed(2)) + \" Go\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[14] || (_cache[14] = _createElementVNode(\"strong\", null, \"Espace utilisé:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(disk.used.toFixed(2)) + \" Go (\" + _toDisplayString(disk.percent) + \"%)\", 1 /* TEXT */)]), _createElementVNode(\"p\", null, [_cache[15] || (_cache[15] = _createElementVNode(\"strong\", null, \"Espace libre:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString(disk.free.toFixed(2)) + \" Go\", 1 /* TEXT */)]), _createVNode(_component_PieChartVue, {\n      data: $options.formatChartData(disk)\n    }, null, 8 /* PROPS */, [\"data\"])]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_8, \"Chargement des données...\")), $data.error ? (_openBlock(), _createElementBlock(\"p\", _hoisted_9, _toDisplayString($data.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","_cache","$event","_ctx","setActiveTab","$data","activeTab","_hoisted_3","loading","systemInfo","cpu_info","_hoisted_4","_createTextVNode","_toDisplayString","model","cores","logical_cores","total_usage","_Fragment","_renderList","usage_per_core","usage","index","frequency_per_core","freq","temperature_per_core","_createCommentVNode","_hoisted_5","os_info","_hoisted_6","os_type","machine_model","node_name","uptime","toFixed","disk_usage","_hoisted_7","disk","diskName","total","used","percent","free","_createVNode","_component_PieChartVue","data","$options","formatChartData","_hoisted_8","error","_hoisted_9"],"sources":["C:\\Users\\GUERBER\\Desktop\\SERVDECON\\PROJET\\FRONTEND\\frontend-vvcraft2\\src\\components\\Serveurs\\MachineStatus.vue"],"sourcesContent":["<template>\r\n  <div class=\"machine-info\">\r\n    <h3>Informations de la Machine</h3>\r\n\r\n    <ul class=\"tabs\">\r\n      <li class=\"tab active\" @click=\"setActiveTab('cpu')\">CPU</li>\r\n      <li class=\"tab\" @click=\"setActiveTab('os')\">OS & Disques</li>\r\n    </ul>\r\n\r\n    <div v-if=\"activeTab === 'cpu'\">\r\n      <section v-if=\"!loading && systemInfo.cpu_info\">\r\n        <h4>Processeur</h4>\r\n        <p><strong>Modèle:</strong> {{ systemInfo.cpu_info.model }}</p>\r\n        <p><strong>Nombre de cœurs physiques:</strong> {{ systemInfo.cpu_info.cores }}</p>\r\n        <p><strong>Nombre de cœurs logiques:</strong> {{ systemInfo.cpu_info.logical_cores }}</p>\r\n        <p><strong>Utilisation totale:</strong> {{ systemInfo.cpu_info.total_usage }}%</p>\r\n        <div v-for=\"(usage, index) in systemInfo.cpu_info.usage_per_core\" :key=\"index\">\r\n          <p><strong>Utilisation du cœur {{ index + 1 }}:</strong> {{ usage }}%</p>\r\n        </div>\r\n        <div v-for=\"(freq, index) in systemInfo.cpu_info.frequency_per_core\" :key=\"index\">\r\n          <p><strong>Fréquence du cœur {{ index + 1 }}:</strong> {{ freq }} MHz</p>\r\n        </div>\r\n        <p><strong>Température CPU:</strong> {{ systemInfo.cpu_info.temperature_per_core }}°C</p>\r\n      </section>\r\n    </div>\r\n\r\n    <div v-if=\"activeTab === 'os'\">\r\n      <section v-if=\"!loading && systemInfo.os_info\">\r\n        <h4>OS</h4>\r\n        <p><strong>Type:</strong> {{ systemInfo.os_info.os_type }}</p>\r\n        <p><strong>Modèle de la machine:</strong> {{ systemInfo.os_info.machine_model }}</p>\r\n        <p><strong>Nom de la machine:</strong> {{ systemInfo.os_info.node_name }}</p>\r\n        <p><strong>Temps d'activité:</strong> {{ systemInfo.os_info.uptime.toFixed(2) }} heures</p>\r\n      </section>\r\n\r\n      <section v-if=\"!loading && systemInfo.disk_usage\">\r\n        <h4>Disques</h4>\r\n        <div v-for=\"(disk, diskName) in systemInfo.disk_usage\" :key=\"diskName\" class=\"disk-info\">\r\n          <h5>{{ diskName }}</h5>\r\n          <p><strong>Capacité totale:</strong> {{ disk.total.toFixed(2) }} Go</p>\r\n          <p><strong>Espace utilisé:</strong> {{ disk.used.toFixed(2) }} Go ({{ disk.percent }}%)</p>\r\n          <p><strong>Espace libre:</strong> {{ disk.free.toFixed(2) }} Go</p>\r\n          <PieChartVue :data=\"formatChartData(disk)\" />\r\n        </div>\r\n      </section>\r\n    </div>\r\n\r\n    <p v-else>Chargement des données...</p>\r\n    <p v-if=\"error\">{{ error }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport PieChartVue from './PieChart/DiskPieChart.vue';\r\nimport RAMPieChart from './PieChart/RAMPieChart.vue';\r\n\r\nexport default {\r\n  name: 'MachineInfo',\r\n  components: {\r\n    PieChartVue,\r\n    RAMPieChart,\r\n  },\r\n  data() {\r\n    return {\r\n      systemInfo: {},\r\n      loading: true,\r\n      error: '',\r\n      activeTab: 'cpu', // Default active tab\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchMachineInfo();\r\n  },\r\n  methods: {\r\n    async fetchMachineInfo() {\r\n      try {\r\n        const response = await axios.get('http://localhost:8000/api/machine/status/');\r\n        this.systemInfo = response.data;\r\n      } catch (err) {\r\n        this.error = 'Erreur lors de la récupération des données.';\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\nformatChartData(disk) {\r\n  const usedSpace = disk.used;\r\n  const freeSpace = disk.free;\r\n  const totalSpace = disk.total;\r\n\r\n  // Calculate percentages\r\n  const usedPercent = (usedSpace / totalSpace) * 100;\r\n  const freePercent = (freeSpace / totalSpace) * 100;\r\n\r\n  // Return data for pie chart\r\n  return [\r\n    { label: 'Utilisé', value: usedPercent, color: 'red' },\r\n    { label: 'Libre', value: freePercent, color: 'green' },\r\n  ];\r\n}\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.machine-info {\r\n  padding: 20px;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n}\r\n\r\n.disk-info {\r\n  margin-bottom: 30px;\r\n}\r\n\r\nh3, h4, h5 {\r\n  color: #333;\r\n}\r\n\r\np {\r\n  color: #555;\r\n  margin-bottom: 10px;\r\n}\r\n\r\ncanvas {\r\n  max-width: 500px;\r\n  margin: 20px auto;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}